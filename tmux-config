#!/usr/bin/env bash
# shellcheck disable=SC2086

# Initialization ----
TMUX_CONFIG_PATH="$(cd "$(dirname "$0")"; pwd -P)/tmux-config"
TMUX_VERSION="$(tmux -V | cut -d" " -f2)"

# Configuration ----
: ${TMUX_CONFIG_INPUT="${HOME}/.tmux/.tmux.conf"}
: ${TMUX_CONFIG_OUTPUT="${HOME}/.tmux/config/$(uname)-${TMUX_VERSION}/.tmux.conf"}

# Bootstrapping ----

if [ "$1" = "--bootstrap" ]; then

	read -r -d '' LOADER <<- EOF
	# Generated by tmux-config. Please edit the file at '${TMUX_CONFIG_INPUT/$HOME/\~}'.
	run-shell "${TMUX_CONFIG_PATH}"
	EOF

	# if it looks like we've never added an autoloader, this is likely the
	# user's own '.tmux.conf' file
	if ! grep -siq "# Generated by tmux-config" ~/.tmux.conf; then
		mkdir -p "$(dirname "${TMUX_CONFIG_INPUT}")"
		cp ~/.tmux.conf "${TMUX_CONFIG_INPUT}"
	fi

	# update the autoloader
	echo "${LOADER}" > ~/.tmux.conf

	echo "'tmux-config' successfully bootstrapped."
	echo "Restart your tmux session to enable 'tmux-config'."

	exit 0

fi

# Global State ----

# The document, represented as an array of strings.
DOCUMENT=()

# A 'stack', representing the results of evaluating 'if' statements
# discovered within the tmux configuration generator. Values will be
# either 'y' or 'n'. We start in the 'y'es state.
STACK="y"

process-line () {

	# if we have no configuration directive, then just write
	# the line out as-is (when enabled)
	if ! [[ "${LINE}" =~ \ *\#+\ *@ ]]; then
		case "${STACK}" in
			*n*) ;;
			*y) DOCUMENT+=("${LINE}") ;;
		esac
		return 0
	fi

	# extract the configuration directive
	local DIRECTIVE
	DIRECTIVE="${LINE/*\#*\@/}"

	case "${DIRECTIVE}" in

	# 'eval' statement: evaluate in current shell
	"eval"*)
		local STATEMENT="${DIRECTIVE/eval /}"
		eval "${STATEMENT}"
	;;

	# 'if' statement: evaluate and check return result
	"if"*)
		local STATEMENT="${DIRECTIVE/if /}"
		eval "${STATEMENT}" &> /dev/null && STACK="${STACK}y" || STACK="${STACK}n"
	;;

	# 'else' statement: flip state
	"else"*)
		case "${STACK}" in
		*y) STACK="${STACK%?}n" ;;
		*n) STACK="${STACK%?}y" ;;
		esac
	;;

	# 'fi': pop the stack
	"fi"*)
		[ -z "${STACK}" ] && echo "[$I]: unexpected 'fi'"
		STACK="${STACK%?}"
	;;

	# unrecognized directive
	*)
		echo "[$I]: unrecognized directive '${DIRECTIVE}'"
	esac
}

# remove an old configuration file
mkdir -p "$(dirname "${TMUX_CONFIG_OUTPUT}")"
rm -f "${TMUX_CONFIG_OUTPUT}"

# main engine -- read and process the file line-by-line
declare -i I=1
while IFS="" read -r LINE; do
	process-line "${LINE}" "${I}"
	I+=1
done < "${TMUX_CONFIG_INPUT}"

# write the document to file
printf "%s\n" "${DOCUMENT[@]}" > "${TMUX_CONFIG_OUTPUT}"

# ask tmux to source the generated file
tmux source-file "${TMUX_CONFIG_OUTPUT}"

